#!/usr/bin/env python
# -*- coding: utf-8 -*-


import rospy
from sensor_msgs.msg import JointState
from funciones import *
from markers import *
from pyquaternion import Quaternion
import tf
	
# Joint names
jnames = ["abductor3_joint", "muslo3_joint", "tobillo3_joint",
          "abductor1_joint", "muslo1_joint", "tobillo1_joint",
          "abductor4_joint", "muslo4_joint", "tobillo4_joint",
          "abductor2_joint", "muslo2_joint", "tobillo2_joint"]

# Inicializar vector
q0 = np.deg2rad(np.array([0,0,0,
			   			  0,0,0,
			   			  0,0,0,
			   			  0,0,0]))

# Pata 1: Superior Izquierda (q1)
q1 = q0[3:6]

# Pata 2: Inferior Izquierda (q2)
q2 = q0[9:12]

# Pata 3: Superior Derecha (q3)
q3 = q0[0:3]

# Pata 4: Inferior Derecha (q4)
q4 = q0[6:9]

# Ball markers
bmarker1 = BallMarker(color['RED'])
bmarker2 = BallMarker(color['BLUE'])
bmarker3 = BallMarker(color['GREEN'])
bmarker4 = BallMarker(color['YELLOW'])
br = tf.TransformBroadcaster()
# Creación de nodo
rospy.init_node('joints_test')

# Publicar al tópico de articulaciones
pub = rospy.Publisher('/joint_states',JointState,queue_size=10)

# Creación del mensaje a enviar 
articulaciones = JointState()
articulaciones.name = jnames 
articulaciones.position = q0

rate = rospy.Rate(10)

xrl = fk_pata2_pos(q2)

print(Quaternion(matrix=xrl[0:3,0:3]))
print(xrl[0:3,3])
q2 = np.array([0,0,0])
while not rospy.is_shutdown():
	articulaciones.header.stamp = rospy.Time.now()
	# q0 = q0 + 0.1 
	articulaciones.position = q0
	pub.publish(articulaciones)
	# Pata 1: Superior Izquierda (q1)
	q1 = q0[3:6]

	# Pata 2: Inferior Izquierda (q2)
	q2 = q0[9:12]

	# Pata 3: Superior Derecha (q3)
	q3 = q0[0:3]

	# Pata 4: Inferior Derecha (q4)
	q4 = q0[6:9]

	xrl = fk_pata1_pos(q1)#xfl
	xfl = fk_pata2_pos(q2)#xrl
	xfr = fk_pata3_pos(q3)
	xrr = fk_pata4_pos(q4)
	quat = Quaternion(matrix=xrl[0:3,0:3])
	print()
	# br.sendTransform((xrl[0,3],xrl[1,3],xrl[1,2]),(quat[1],quat[2],quat[3],quat[0]),rospy.Time.now(),'dh0d','base_link')
	

	bmarker1.position(xfl)
	bmarker2.position(xfr)
	bmarker3.position(xrr)
	bmarker4.position(xrl)

	rate.sleep()