#!/usr/bin/env python
# -*- coding: utf-8 -*-


import rospy
from sensor_msgs.msg import JointState
from funciones import *
from markers import *

# Joint names
jnames = ["abductor3_joint", "muslo3_joint", "tobillo3_joint",
          "abductor1_joint", "muslo1_joint", "tobillo1_joint",
          "abductor4_joint", "muslo4_joint", "tobillo4_joint",
          "abductor2_joint", "muslo2_joint", "tobillo2_joint"]

# Posición deseada
pata =  1
qd = np.deg2rad(np.array([30,0,30,
						  30,30,30,
						  30,30,30,
						  30,30,30]))

xd2 = fk_pata2_pos(qd[9:12],'pose')
Td2 = fk_pata2_pos(qd[9:12])

# Inicializar vector
q0 = np.deg2rad(np.array([30,0,0,
			   			  0,30,0,
			   			  0,30,0,
			   			  0,0,-30]))

# Pata 1: Superior Izquierda (q1) y posición actual
q12 = q0[3:6]
# Pata 2: Inferior Izquierda (q2)
q2 = q0[9:12]
# Pata 3: Superior Derecha (q3)
q3 = q0[0:3]
# Pata 4: Inferior Derecha (q4)
q4 = q0[6:9]

x,T = update_initial_state(q0)
x1 = x[0]; x2 = x[1]; x3 = x[2]; x4 = x[3]

# Ball markers
bmarker1 = BallMarker(color['RED'])
bmarker2 = BallMarker(color['BLUE'])
bmarker3 = BallMarker(color['GREEN'])
bmarker4 = BallMarker(color['YELLOW'])


# Creación de nodo
rospy.init_node('diff_fk_joints_pos_test')

# Publicar al tópico de articulaciones
pub = rospy.Publisher('/joint_states',JointState,queue_size=10)

# Creación del mensaje a enviar 
articulaciones = JointState()
articulaciones.name = jnames 
articulaciones.position = q0

freq = 20
dt = 1.0/freq
rate = rospy.Rate(freq)
counter_xd = 0 

while not rospy.is_shutdown():
	articulaciones.header.stamp = rospy.Time.now()
	# print(np.round(q0,2))
	articulaciones.position = q0
	pub.publish(articulaciones)
	ep = xd2[0:3] -x2[0:3] 
	Qe = error_quaterv2(x2[3:7], xd2[3:7])
	e0 = np.array([[Qe[0,0]-1],
	       [Qe[1,0]],
	       [Qe[2,0]],
	       [Qe[3,0]]])
	e = np.array([[ep[0]],[ep[1]],[ep[2]],[e0[0,0]],[e0[1,0]],[e0[2,0]],[e0[3,0]]]) 
    
	k = 1
	e_dot = k*e
	J = jacobian_a_pose(q2,2)
	try: 
		J_mul = np.linalg.pinv(J)
	except np.linalg.LinAlgError:
		print("Matriz de rango no completo ")
		J_mul = (J.transpose()).dot(np.linalg.inv(J.dot(J.transpose()) + k*np.eye(3)))

	q_dot = J_mul.dot(e_dot)
	q_dot_vect = np.array([q_dot[0,0],q_dot[1,0],q_dot[2,0]])
	q2 =  q2 + dt*q_dot_vect
	x2 = fk_pata2_pos(q2,'pose')
	# Td2 = fk_pata2_pos(q2)
	q0[9:12] = q2
	# articulaciones.position = q0
	bmarker2.position(Td2)

	rate.sleep()
